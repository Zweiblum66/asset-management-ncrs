version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8080
    depends_on:
      - auth-service
      - asset-service
      - metadata-service
    networks:
      - app-network

  # Authentication Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile.dev
    ports:
      - "8081:8081"
    volumes:
      - ./services/auth-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8081
      - DB_CONNECTION=postgres://postgres:postgres@postgres:5432/auth_db
      - JWT_SECRET=development_jwt_secret
      - JWT_EXPIRES_IN=1d
    depends_on:
      - postgres
    networks:
      - app-network

  # Asset Service
  asset-service:
    build:
      context: ./services/asset-service
      dockerfile: Dockerfile.dev
    ports:
      - "8082:8082"
    volumes:
      - ./services/asset-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8082
      - DB_CONNECTION=postgres://postgres:postgres@postgres:5432/asset_db
      - STORAGE_TYPE=minio
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    depends_on:
      - postgres
      - minio
    networks:
      - app-network

  # Metadata Service
  metadata-service:
    build:
      context: ./services/metadata-service
      dockerfile: Dockerfile.dev
    ports:
      - "8083:8083"
    volumes:
      - ./services/metadata-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8083
      - MONGO_URI=mongodb://mongodb:27017/metadata_db
    depends_on:
      - mongodb
    networks:
      - app-network

  # Search Service
  search-service:
    build:
      context: ./services/search-service
      dockerfile: Dockerfile.dev
    ports:
      - "8084:8084"
    volumes:
      - ./services/search-service:/app
      - /app/__pycache__
    environment:
      - PORT=8084
      - OPENSEARCH_HOST=opensearch
      - OPENSEARCH_PORT=9200
    depends_on:
      - opensearch
    networks:
      - app-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8080
    depends_on:
      - api-gateway
    networks:
      - app-network

  # Databases and Infrastructure
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: auth_db,asset_db,workflow_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/development/postgres/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    networks:
      - app-network

  mongodb:
    image: mongo:6-jammy
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network

  opensearch:
    image: opensearchproject/opensearch:2.9.0
    ports:
      - "9200:9200"
      - "9600:9600"
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - DISABLE_SECURITY_PLUGIN=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network

  # Message brokers
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

  # Only for development - in production would use managed Kafka
  kafka:
    image: bitnami/kafka:3.5
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  opensearch_data:
  redis_data:
  minio_data:
  rabbitmq_data:
  kafka_data:
